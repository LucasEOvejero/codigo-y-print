def numeroMayor(lista):
    if isinstance(lista, list) and all(isinstance(num, int) for num in lista):
        mayor = max(lista)
        return mayor
    else:
        return None

def numeroBinario(numero):
    if isinstance(numero, int) and numero > 0:
        return bin(numero)[2:] # Convertir el número a binario y quitar el prefijo "0b"
    elif numero == 0:
        return '0'
    else:
        return None

def crearDiccionario(lista):
    if all(isinstance(num, int) for num in lista):
        multiplos3 = [num for num in lista if num % 3 == 0] # Múltiplos de 3
        cuadrados = [num**2 for num in lista] # Cuadrados
        promedio = sum(lista) / len(lista)
        menores_promedio = [num for num in lista if num < promedio] # Números menores al promedio

        return {
            'multiplos3': multiplos3,
            'cuadrados': cuadrados,
            'menores_promedio': menores_promedio
        }
    else:
        return None

def trianguloRectangulo(a, b, c):
    if all(isinstance(num, int) for num in [a, b, c]):
        if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2: # Teorema de Pitágoras
            return True
        else:
            return False
    else:
        return None

def ciudadesPoblacion(diccionario):
    if isinstance(diccionario, dict):
        ciudades_seleccionadas = [[ciudad, poblacion] for ciudad, poblacion in diccionario.items() if ciudad.startswith('B')]
        promedio = sum(poblacion for ciudad, poblacion in ciudades_seleccionadas) / len(ciudades_seleccionadas)
        ciudades_seleccionadas.append(['promedio', promedio])
        return ciudades_seleccionadas
    else:
        return None

def ordenarPalabras(palabras):
    if isinstance(palabras, str) and '-' in palabras:
        palabras_lista = palabras.split('-')
        palabras_lista.sort()
        return '-'.join(palabras_lista)
    else:
        return None

def stringEspejo(texto):
    if isinstance(texto, str) and len(texto) > 3:
        return texto[::-1] # Invertir el texto utilizando slicing
    else:
        return None
